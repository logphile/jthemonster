name: SWA Deploy (jthe.monster)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    env:
      NUXT_PUBLIC_SUPABASE_URL: ${{ secrets.NUXT_PUBLIC_SUPABASE_URL || secrets.SUPABASE_URL }}
      NUXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NUXT_PUBLIC_SUPABASE_ANON_KEY || secrets.SUPABASE_ANON_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install deps (include dev)
        working-directory: app
        env:
          # Make sure we don't omit dev deps accidentally
          NODE_ENV: ""
          NPM_CONFIG_PRODUCTION: "false"
          NPM_CONFIG_OMIT: ""
          NPM_CONFIG_FUND: "false"
          NPM_CONFIG_AUDIT: "false"
          NUXT_TELEMETRY_DISABLED: "1"
          # Supabase envs for generate-time
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NUXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NUXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          npm ci --include=dev --ignore-scripts

      - name: Verify pinia/nuxt module is present
        working-directory: app
        run: node -e "console.log(require.resolve('@pinia/nuxt'))"

      - name: Env guard
        working-directory: app
        run: node scripts/check-env.cjs

      - name: Build (Nuxt generate)
        working-directory: app
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NUXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NUXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          npx nuxt prepare
          npm run generate

      - name: Sanity check Nuxt build output
        run: |
          ls -la app/.output/public/_nuxt/builds/meta
          test -n "$(ls -1 app/.output/public/_nuxt/*.js | head -n1)"
          # Fail if no CSS chunks were emitted (indicates Tailwind not wired)
          CSS_COUNT=$(ls -1 app/.output/public/_nuxt/*.css 2>/dev/null | wc -l)
          if [ "$CSS_COUNT" -eq 0 ]; then
            echo "❌ No CSS files emitted in .output/public/_nuxt — Tailwind likely not compiled."
            exit 1
          fi

      - name: Ensure SWA config included in artifact
        run: |
          if [ -f app/.output/public/staticwebapp.config.json ]; then
            echo "SWA config already present in artifact (from app/public)."
          else
            if [ -f app/staticwebapp.config.json ]; then
              cp app/staticwebapp.config.json app/.output/public/staticwebapp.config.json
              echo "Copied app/staticwebapp.config.json into artifact."
            elif [ -f staticwebapp.config.json ]; then
              cp staticwebapp.config.json app/.output/public/staticwebapp.config.json
              echo "Copied root staticwebapp.config.json into artifact."
            else
              echo "No SWA config found at repo root or app/. If this is expected, ignore."
            fi
          fi

      - name: Stamp and inspect artifact (config + version)
        run: |
          echo "git-sha $GITHUB_SHA" > app/.output/public/version.txt
          echo "built-at $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> app/.output/public/version.txt
          echo "----- staticwebapp.config.json -----"
          if [ -f app/.output/public/staticwebapp.config.json ]; then
            cat app/.output/public/staticwebapp.config.json
          else
            echo "(no staticwebapp.config.json in artifact)"
          fi

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "app"
          output_location: ".output/public"
          skip_api_build: true
